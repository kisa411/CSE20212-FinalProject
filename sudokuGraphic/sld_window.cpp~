#include "sdl_window.h"

SDL_Win_Wrap::SDL_Win_Wrap(int nScreenWidth, int nScreenHeight)
{
	SCREEN_WIDTH = nScreenWidth;
	SCREEN_HEIGTH = nScreenHeight;
	init();
}

SDL_Win_Wrap::~SDL_Win_Wrap()
{
	//Destroy window	
	SDL_DestroyRenderer( gRenderer );
	SDL_DestroyWindow( gWindow );
	gWindow = NULL;
	gRenderer = NULL;

	//Quit SDL subsystems
	IMG_Quit();
	SDL_Quit();
}

int SDL_Win_Wrap::getScreenWidth()
{
	return SCREEN_WIDTH;
}


int SDL_Win_Wrap::getScreenHeight()
{
	return SCREEN_HEIGHT;
}

bool SDL_Win_Wrap::init()
{
	//Initialization flag
	bool success = true;

	//Initialize SDL
	if( SDL_Init( SDL_INIT_VIDEO ) < 0 )
	{
		printf( "SDL could not initialize! SDL Error: %s\n", SDL_GetError() );
		success = false;
	}
	else
	{
		//Set texture filtering to linear
		if( !SDL_SetHint( SDL_HINT_RENDER_SCALE_QUALITY, "1" ) )
		{
			printf( "Warning: Linear texture filtering not enabled!" );
		}

		//Create window
		gWindow = SDL_CreateWindow( "SDL Tutorial", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN );
		if( gWindow == NULL )
		{
			printf( "Window could not be created! SDL Error: %s\n", SDL_GetError() );
			success = false;
		}
		else
		{
			//Create renderer for window
			gRenderer = SDL_CreateRenderer( gWindow, -1, SDL_RENDERER_SOFTWARE );
			if( gRenderer == NULL )
			{
				printf( "Renderer could not be created! SDL Error: %s\n", SDL_GetError() );
				success = false;
			}
			else
			{
				//Initialize renderer color
				SDL_SetRenderDrawColor( gRenderer, 0xFF, 0xFF, 0xFF, 0xFF );

				//Initialize PNG loading
				int imgFlags = IMG_INIT_PNG;
				if( !( IMG_Init( imgFlags ) & imgFlags ) )
				{
					printf( "SDL_image could not initialize! SDL_mage Error: %s\n", IMG_GetError() );
					success = false;
				}
			}
		}
	}

	return success;
}

bool SDL_Win_Wrap::loadMedia()
{
	const int startx = 142;
	const int starty = 5;
	const int width = 92;
	const int height = 104;
	//Loading success flag
	bool success = true;

	//Load sprite sheet texture
	if( !gSpriteSheetTexture.loadFromFile( "numbers.png" ) )
	{
		printf( "Failed to load sprite sheet texture!\n" );
		success = false;
	}
	else
	{
		//Make Sprite clips from spriteSheet
		for(int i = 0; i < 10; i++)
		{
			gSpriteClips[i].x = startx + width*i;
			gSpriteClips[i].y = starty + width*i;
			gSpriteClips[i].w = width;
			gSpriteClips[i].h = height;
		}
	}
	
	if( !gBackgroundTexture.loadFromFile( "sudoku_background.png" ))
	{
		printf( "Failed to load sprite sheet texture!\n" );
		success = false;
	}
	
	if( !gSelectorTexture.loadFromFile("selector.png"));
	{
		printf("Failed to load selector");
		success = false;
	}

	return success;
}
